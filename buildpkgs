#!/bin/bash
#
# vim ft: shell

set -eu -o pipefail

[ "${DEBUG:=false}" = "true" ] && set -x

print_info() {
    printf "[\033[1;35m+\033[0m] INFO: %s\n" "${1}"
}

print_warn() {
    printf "[\033[1;33m!\033[0m] \033[1;33mWARNING\033[0m: %s\n" "${1}" >&2
}

print_error() {
    printf "[\033[1;34mx\033[0m] \033[1;34mERROR\033[0m: %s\n" "${1}" >&2
    exit 1
}

print_usage() {
    cat <<HEREDOC >&2

  usage: $(basename "${0}") [-poqh] <command> [<package>]

    -p, --packages-dir  Path to packages to build
    -o, --output        Path to output built packages to
    -q, --quiet         Do not output to stdout
    -h, --help          Print this help and exit

    command             Command to run. One of:

        source          Fetch sources for <package>
        build           Build package(s)

    package             Package in <packages-dir> to run
                        <command> for

HEREDOC
}

checksum() {
    echo "$1 $2" | sha256sum -c - 2>/dev/null
}

fetch_sources() {
    (
    pushd "${1:?missing package name}"

    # shellcheck source=example-package/hello-world/pkg.conf
    source pkg.conf

    print_info "Fetching sources for '$pkgname'"

    orig="${pkgname}_${pkgver}.orig.${dist_ext:-tar.gz}"
    source_dir="${pkgname}-${pkgver}"

    if ! checksum "${dist_sha256}" "${orig}"; then
        curl -sSfL -o "${orig}" "${dist}"
        checksum "${dist_sha256}" "${orig}"
    fi

    rm -rf "${source_dir}"
    mkdir "${source_dir}"

    tar -xf "${orig}" --strip-components 1 -C "${source_dir}"

    cp -r debian "${source_dir}"/
    )
}

build_package() {
    (
    pushd "${1:?missing package name}"

    # shellcheck source=example-package/hello-world/pkg.conf
    source pkg.conf

    pushd "${pkgname}-${pkgver}"

    print_info "Building package '$pkgname'"

    # Get build deps for package
    sudo apt-get build-dep -y .

    debuild -- clean 2>&1
    # Source package
    debuild --no-lintian -S -uc -us 2>&1
    # Binary package
    debuild --no-lintian -b -uc -us 2>&1

    debuild -- clean 2>&1
    )
}

repo() {

    print_info "Generating package indexes"

    mkdir -p "$output_dir"/{sources,packages}

    cp -v "$packages_dir"/*/{*.dsc,*.orig.tar*,*.debian.tar*} "$output_dir"/sources
    cp -v "$packages_dir"/*/*.deb "$output_dir"/packages

    # Generate package indexes
    ( cd "$output_dir"/packages; dpkg-scanpackages . | gzip -9c > Packages.gz )
    ( cd "$output_dir"/sources; dpkg-scansources . | gzip -9c > Sources.gz )
}

while true; do
    shiftpos=2

    case "${1:-}" in
        -p|--packages-dir)
            packages_dir="$2" ;;
        -q|--quiet)
            exec >> /dev/null
            shiftpos=1
            ;;
        -o|--output)
            output_dir="$2" ;;
        -h|--help)
            print_usage
            exit 0
            ;;
        *) break ;;
    esac

    shift "$shiftpos"
done

[ -z "${packages_dir:-}" ] && print_error "packages-dir is not set"
[ -z "${output_dir:-}" ] && print_error "output is not set"

case "${1:-}" in
    source)
        fetch_sources "$packages_dir/${2:?missing package name}"
        exit $?
        ;;
    build)
        # Refresh package index for build dependencies
        sudo apt-get update

        # Build all packages
        for p in "$packages_dir"/${2:-*}; do
            fetch_sources "$p"
            build_package "$p"
        done

        # Copy packages to $output_dir/ and generate indexes
        repo
        ;;
    *)
        print_usage
        exit 1
        ;;
esac
